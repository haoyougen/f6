<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd 
    http://www.springframework.org/fschema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
  http://www.springframework.org/schema/jee
  http://www.springframework.org/schema/jee/spring-jee.xsd">
	<!-- open message converter -->
	<mvc:annotation-driven />
	<!-- load jdbc.properties -->
	<context:component-scan base-package="com.f6"></context:component-scan>

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:messages</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="false" />
		<property name="fileEncodings" value="UTF-8" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!-- enable transaction demarcation with annotations -->
	<context:property-placeholder
		ignore-unresolvable="true" location="classpath:jdbc.properties" />

	<context:property-placeholder
		ignore-unresolvable="true" location="classpath:mail.properties" />

	<!-- <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean"> 
		<property name="locations"> <list> <value>classpath:qiniu.properties</value> 
		</list> </property> </bean> <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"> 
		<property name="properties" ref="configProperties" /> </bean> -->

	<!-- <jee:jndi-lookup id="authDS" jndi-name="jdbc/CoreDB" /> <jee:jndi-lookup 
		id="webdbDS" jndi-name="jdbc/webdb" /> <jee:jndi-lookup id="ccmdbDS" jndi-name="jdbc/ccmdb" 
		/> <jee:jndi-lookup id="webdbDSXA" jndi-name="jdbc/webdbXA" /> <jee:jndi-lookup 
		id="ccmdbDSXA" jndi-name="jdbc/ccmdbXA" /> -->

	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="myds" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driver}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property name="poolPreparedStatements" 
			value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" 
			value="20" /> -->

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="myds"></property>
	</bean>



	<!-- <tx:annotation-driven transaction-manager="transactionManagerX" /> 
		<tx:annotation-driven transaction-manager="transactionManagerY" /> -->

	<!-- <bean id="AtomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" 
		init-method="init" destroy-method="close"> <property name="forceShutdown" 
		value="false" /> </bean> <bean id="AtomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp"> 
		<property name="transactionTimeout" value="300" /> </bean> -->

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="myds">
	</bean>




	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="sqlSessionFactory" name="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="myds" />
		<property name="configLocation" value="classpath:sqlMapConfig.xml" />
		<property name="mapperLocations" value="classpath:mapper/**/*Mapper.xml" />
	</bean>

	<bean name="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="publish*" propagation="REQUIRED" />
			<!--<tx:method name="*" read-only="true" /> -->
		</tx:attributes>
	</tx:advice>

	<aop:config expose-proxy="true"> <!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="txPointcut" expression="execution(* com.f6.*.service..*.*(..))" />
		<!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
	</aop:config>

	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource"> <ref local="dataSource" /> </property> </bean> -->
	<!-- Atomikos Transaction control start -->
	<!-- Atomikos Transaction control end -->

	<!-- <bean id="transactionManagerJTA" class="org.springframework.transaction.jta.JtaTransactionManager"> 
		<property name="dataSource"> <ref local="dataSource" /> </property> </bean> -->


	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host">
			<value>${mail.host}</value>
		</property>
		<property name="defaultEncoding">
			<value>${mail.encoding}</value>
		</property>
	</bean>

	<bean id="sender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host">
			<value>${mail.host}</value>
		</property>
		<property name="defaultEncoding">
			<value>${mail.encoding}</value>
		</property>
	</bean>
	<!-- For Filters -->
	<!-- filter的id是在web.xml中配置的那个 -->
	<bean id="filter_mainfilter" class="com.f6.filters.MainFilter">
		<property name="exclusiveurl">
			<list>
				<value>/secure/login</value>
				<value>/secure/logout</value>
				<value>/secure/reg</value>
			</list>
		</property>
	</bean>
		<bean id="authenService" class="com.f6.auth.service.AuthenService">
		<property name="authenDAO" ref="authenDAO" />
	</bean>

	<bean id="authenDAO" class="com.f6.auth.dao.AuthenDAO">
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
	</bean>


</beans>
